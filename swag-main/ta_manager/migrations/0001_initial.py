# Generated by Django 4.2.7 on 2023-12-14 04:31

from django.conf import settings
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import phone_field.models
import ta_manager.models.user


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('uwm_id', models.IntegerField(help_text='Student/faculty ID', primary_key=True, serialize=False, unique=True, verbose_name='UWM ID')),
                ('first_name', models.CharField(max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(max_length=150, verbose_name='last name')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('phone', phone_field.models.PhoneField(help_text='Visible only to supervisors', max_length=31, verbose_name='contact phone number')),
                ('address', models.TextField(help_text='Visible only to supervisors', max_length=120, verbose_name='mailing Address')),
                ('groups', models.ForeignKey(help_text='The group this user belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='user_set', related_query_name='user', to='auth.group', to_field='name', verbose_name='group')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'permissions': [('view_all_user_data', 'Can view all data of this user'), ('edit_own_user_data', 'Can edit their own info (not assignments)'), ('edit_all_user_data', 'Can edit info of all users'), ('view_public_user_data', 'Can view public info of all users (not phone or address)'), ('create_user', 'Can create new users'), ('delete_user', 'Can delete existing users'), ('notify_own_tas', 'Can notify TAs assigned to the same course as themselves'), ('notify_all_users', 'Can notify all users')],
                'default_permissions': [],
            },
            managers=[
                ('objects', ta_manager.models.user.SingleGroupUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False, unique=True, verbose_name='Course ID')),
                ('name', models.CharField(max_length=120, verbose_name='Course Name')),
                ('department', models.CharField(max_length=120, verbose_name='Department')),
                ('term', models.CharField(max_length=120, verbose_name='Course Term')),
                ('instructor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='courses_instructing', to=settings.AUTH_USER_MODEL, verbose_name='Instructor')),
                ('tas', models.ManyToManyField(help_text='TAs assigned to this course can be assigned to sections of this courseby instructors.', related_name='courses_taing', to=settings.AUTH_USER_MODEL, verbose_name='TAs')),
            ],
            options={
                'verbose_name': 'course',
                'verbose_name_plural': 'courses',
                'permissions': [('view_all_course_data', 'Can view all data of this course'), ('create_course', 'Can create new courses'), ('view_own_course_assignments', 'Can view courses they are assigned to'), ('assign_all_instructors', 'Can assign any instructor to a course'), ('assign_all_tas_to_course', 'Can assign any TA to a course')],
                'default_permissions': [],
            },
        ),
        migrations.CreateModel(
            name='Section',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False, unique=True)),
                ('section_name', models.CharField(max_length=150)),
                ('location', models.CharField(max_length=150)),
                ('day_of_week', models.IntegerField(choices=[(1, 'Monday'), (2, 'Tuesday'), (3, 'Wednesday'), (4, 'Thursday'), (5, 'Friday'), (6, 'Saturday'), (7, 'Sunday')], default=1)),
                ('time', models.TimeField()),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ta_manager.course')),
                ('ta', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'section',
                'verbose_name_plural': 'sections',
                'permissions': [('view_all_section_data', 'Can view all data of this section'), ('create_section', 'Can create new sections'), ('view_ta_section_assignments', 'Can view all sections that a TA is assigned to'), ('assign_own_tas_to_section', 'Can assign a TA assigned to the same course to a section of that course'), ('assign_all_tas_to_section', 'Can assign any TA to a section')],
                'default_permissions': [],
            },
        ),
    ]
